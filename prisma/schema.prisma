// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AcademicSemester {
  id                    String                 @id @default(uuid())
  year                  Int
  title                 String
  code                  String
  startMonth            String
  endMonth              String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  students              Student[]
  semesterRegistrations SemesterRegistration[]

  @@map("academic_semesters")
}

model AcademicFaculty {
  id                  String               @id @default(uuid())
  title               String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  academicDepartments AcademicDepartment[]

  students  Student[]
  faculties Faculty[]

  @@map("academic_faculty")
}

model AcademicDepartment {
  id                String          @id @default(uuid())
  title             String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  students          Student[]
  faculties         Faculty[]
  offeredCourses    OfferedCourse[]
  academicFaculty   AcademicFaculty @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId String

  @@map("academic_departments")
}

model Student {
  id           String   @id @default(uuid())
  studentId    String
  firstName    String
  lastName     String
  middleName   String   @default("")
  profileImage String
  email        String   @unique
  contactNo    String
  gender       String
  bloodGroup   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  academicSemester     AcademicSemester   @relation(fields: [academicSemesterId], references: [id])
  academicSemesterId   String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId    String

  @@map("students")
}

model Faculty {
  id           String   @id @default(uuid())
  facultyId    String
  firstName    String
  lastName     String
  middleName   String   @default("")
  profileImage String
  email        String   @unique
  contactNo    String
  gender       String
  bloodGroup   String
  designation  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  courses              CourseFaculty[]
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicDepartmentId String
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])
  academicFacultyId    String

  @@map("faculties")
}

model Building {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rooms Rooms[]

  @@map("buildings")
}

model Rooms {
  id         String   @id @default(uuid())
  roomNumber String
  floor      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  buildingId String

  building Building @relation(fields: [buildingId], references: [id])

  @@map("rooms")
}

model Course {
  id        String   @id @default(uuid())
  title     String
  code      String
  credits   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  faculties      CourseFaculty[]
  offeredCourses OfferedCourse[]
  prerequsite    CourseToPrerequisiteId[] @relation("courseToPreRequisite")
  prerequsiteFor CourseToPrerequisiteId[] @relation("preRrequisiteToCourse")

  @@map("courses")
}

model CourseToPrerequisiteId {
  courseId       String
  preRequisiteId String

  course       Course @relation(fields: [courseId], references: [id], name: "courseToPreRequisite")
  preRequisite Course @relation(fields: [preRequisiteId], references: [id], name: "preRrequisiteToCourse")

  @@id([courseId, preRequisiteId])
}

model CourseFaculty {
  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  facultyId String
  faculty   Faculty @relation(fields: [facultyId], references: [id])

  @@id([courseId, facultyId])
  @@map("course_faculties")
}

model SemesterRegistration {
  id                    String                      @id @default(uuid())
  startDate             DateTime
  endDate               DateTime
  status                SemesterRegistrationStatus? @default(UPCOMING)
  minCredit             Int                         @default(0)
  maxCredit             Int                         @default(0)
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  academicSemesterId    String
  offeredCourses        OfferedCourse[]
  offeredCourseSections OfferedCourseSection[]
  academicSemester      AcademicSemester            @relation(fields: [academicSemesterId], references: [id])

  @@map("semester_registration")
}

enum SemesterRegistrationStatus {
  ONGOING
  UPCOMING
  ENDED
}

model OfferedCourse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  offeredCouresSections OfferedCourseSection[]
  academicDepartmentId String
  academicDepartment   AcademicDepartment     @relation(fields: [academicDepartmentId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  @@map("offered_courses")
}

model OfferedCourseSection {
  id    String @id @default(uuid())
  title String

  maxCapacity              Int
  currentlyEnrolledStudent Int @default(0)

  offeredCourseId        String
  offeredCourses         OfferedCourse        @relation(fields: [offeredCourseId], references: [id])

  semesterRegistrationId String
  semesterRegistration   SemesterRegistration @relation(fields: [semesterRegistrationId], references: [id])

  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt

  @@map("offered_course_sections")
}
